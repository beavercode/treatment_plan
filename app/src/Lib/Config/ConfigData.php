<?php
/**
 * (c) Lex Kachan <lex.kachan@gmail.com>
 */

namespace UTI\Lib\Config;

use UTI\Lib\Config\Exceptions\ConfigException;

/**
 * Stores cached configuration data.
 *
 * //todo Real config class must be generated by script and cached for effective use.
 *
 * @package UTI\Lib\Config
 */
class ConfigData
{
    /**
     * @var array Configuration options
     */
    private $options = [];

    /**
     * Init.
     *
     * @param array $options Flattened assoc array of configuration options.
     */
    public function __construct(array $options)
    {
        $this->options = $options;
    }

    /**
     * Get value from by key.
     *
     * @param string $key Key in notation 'dir.tpl.view'
     *
     * @return mixed key value
     *
     * @throws ConfigException
     */
    public function get($key)
    {
        if (!isset($this->options[$key])) {
            throw new ConfigException(sprintf('Wrong config option key: %s', $key));
        }

        return $this->options[$key];
    }

    /**
     * Using array_reduce function (no user loops).
     *
     * This function is named fold in functional programming languages such as
     * lisp, ocaml, haskell, and erlang. Python just calls it reduce.
     *
     * Example: $this->get('dir.tpl.view', 'not found');
     *
     * @param      $key
     * @param null $default
     *
     * @return mixed
     */
    public function get__notUsed($key, $default = null)
    {
        //todo Check if option in ConfigData first. If not - get from config file.
        return array_reduce(
            explode('.', $key),
            function ($result, $item) use ($default) {
                return isset($result[$item]) ? $result[$item] : $default;
            },
            $this->options
        );
    }
}
